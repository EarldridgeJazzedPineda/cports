This is updated by q66 to avoid the WeakCache replacement stuff as our
mozjs128 build includes the API, and the test expectations have been
updated.

From 228308bf0c170f1096d408d72abaaccad00300fb Mon Sep 17 00:00:00 2001
From: Philip Chimento <philip.chimento@gmail.com>
Date: Sun, 7 Jul 2024 22:33:52 -0700
Subject: [PATCH] Draft: mozjs128

TODO: Includes hacky replacement for WeakCache. WeakCacheGC should be part
of GjsContextPrivate, instead of static singleton.
Ideally we get SpiderMonkey to bring this functionality back.
See https://bugzilla.mozilla.org/show_bug.cgi?id=1828648.

TODO: Split out gjs_debug_callable() refactor to be independent of
JS_GetMaybePartialFunctionDisplayId() rename and merge it before the
migration.

TODO: Requires fixing a build bug in SpiderMonkey. Regression from
https://bugzilla.mozilla.org/show_bug.cgi?id=1459764. SHARED_LIBRARY got
updated to hold a full path, while IMPORT_LIBRARY didn't, which breaks
js/src/build/Makefile.in.

Column numbers now start counting at 1, not 0.
---
 gi/function.cpp                               | 14 +---
 gi/gerror.cpp                                 |  9 ++-
 gi/object.cpp                                 |  7 +-
 gi/value.cpp                                  |  6 +-
 gjs/byteArray.cpp                             | 23 +++---
 gjs/context-private.h                         | 12 ++-
 gjs/context.cpp                               | 18 ++---
 gjs/global.cpp                                |  7 --
 gjs/jsapi-util-error.cpp                      | 15 ++--
 gjs/jsapi-util-string.cpp                     | 10 ++-
 gjs/jsapi-util.h                              |  1 +
 gjs/text-encoding.cpp                         |  8 +-
 gjs/weakcache.cpp                             | 14 ++++
 gjs/weakcache.h                               | 73 +++++++++++++++++++
 .../debugger/backtrace.debugger.output        | 28 +++----
 .../debugger/breakpoint.debugger.output       | 12 +--
 .../debugger/continue.debugger.output         |  4 +-
 .../debugger/delete.debugger.output           | 16 ++--
 .../debugger/down-up.debugger.output          | 18 ++---
 .../debugger/finish.debugger.output           | 12 +--
 .../debugger/frame.debugger.output            |  6 +-
 installed-tests/debugger/keys.debugger.output |  2 +-
 .../debugger/lastvalues.debugger.output       |  2 +-
 installed-tests/debugger/list.debugger.output |  4 +-
 installed-tests/debugger/next.debugger.output | 20 ++---
 .../debugger/print.debugger.output            |  2 +-
 .../debugger/return.debugger.output           | 16 ++--
 installed-tests/debugger/set.debugger.output  |  2 +-
 installed-tests/debugger/step.debugger.output | 32 ++++----
 .../debugger/throw-ignored.debugger.output    |  2 +-
 .../debugger/throw.debugger.output            | 12 +--
 .../debugger/until.debugger.output            | 10 +--
 installed-tests/scripts/testWarnings.sh       |  2 +-
 meson.build                                   |  3 +-
 34 files changed, 260 insertions(+), 162 deletions(-)
 create mode 100644 gjs/weakcache.cpp
 create mode 100644 gjs/weakcache.h

diff --git a/gi/function.cpp b/gi/function.cpp
index b89b18c90..a0705663e 100644
--- a/gi/function.cpp
+++ b/gi/function.cpp
@@ -390,12 +390,9 @@ void GjsCallbackTrampoline::callback_closure(GIArgument** args, void* result) {
                 gjs->exit_immediately(code);
 
             // Some other uncatchable exception, e.g. out of memory
-            JSFunction* fn = JS_GetObjectFunction(callable());
-            std::string descr =
-                fn ? "function " + gjs_debug_string(JS_GetFunctionDisplayId(fn))
-                   : "callable object " + gjs_debug_object(callable());
             g_error("Call to %s (%s.%s) terminated with uncatchable exception",
-                    descr.c_str(), m_info.ns(), m_info.name());
+                    gjs_debug_callable(callable()).c_str(), m_info.ns(),
+                    m_info.name());
         }
 
         // If the callback has a GError** argument, then make a GError from the
@@ -553,14 +550,11 @@ bool GjsCallbackTrampoline::callback_closure_inner(
             return false;
 
         if (!is_array) {
-            JSFunction* fn = JS_GetObjectFunction(callable());
-            std::string descr =
-                fn ? "function " + gjs_debug_string(JS_GetFunctionDisplayId(fn))
-                   : "callable object " + gjs_debug_object(callable());
             gjs_throw(context,
                       "Call to %s (%s.%s) returned unexpected value, expecting "
                       "an Array",
-                      descr.c_str(), m_info.ns(), m_info.name());
+                      gjs_debug_callable(callable()).c_str(), m_info.ns(),
+                      m_info.name());
             return false;
         }
 
diff --git a/gi/gerror.cpp b/gi/gerror.cpp
index b3900291e..b7ae915a4 100644
--- a/gi/gerror.cpp
+++ b/gi/gerror.cpp
@@ -4,6 +4,7 @@
 
 #include <config.h>
 
+#include <js/ColumnNumber.h>
 #include <stdint.h>
 
 #include <girepository.h>
@@ -278,7 +279,8 @@ bool gjs_define_error_properties(JSContext* cx, JS::HandleObject obj) {
     JS::RootedObject frame(cx);
     JS::RootedString stack(cx);
     JS::RootedString source(cx);
-    uint32_t line, column;
+    uint32_t line;
+    JS::TaggedColumnNumberOneOrigin tagged_column;
 
     if (!JS::CaptureCurrentStack(cx, &frame) ||
         !JS::BuildStackString(cx, nullptr, frame, &stack))
@@ -287,7 +289,7 @@ bool gjs_define_error_properties(JSContext* cx, JS::HandleObject obj) {
     auto ok = JS::SavedFrameResult::Ok;
     if (JS::GetSavedFrameSource(cx, nullptr, frame, &source) != ok ||
         JS::GetSavedFrameLine(cx, nullptr, frame, &line) != ok ||
-        JS::GetSavedFrameColumn(cx, nullptr, frame, &column) != ok) {
+        JS::GetSavedFrameColumn(cx, nullptr, frame, &tagged_column) != ok) {
         gjs_throw(cx, "Error getting saved frame information");
         return false;
     }
@@ -299,7 +301,8 @@ bool gjs_define_error_properties(JSContext* cx, JS::HandleObject obj) {
                                  JSPROP_ENUMERATE) &&
            JS_DefinePropertyById(cx, obj, atoms.line_number(), line,
                                  JSPROP_ENUMERATE) &&
-           JS_DefinePropertyById(cx, obj, atoms.column_number(), column,
+           JS_DefinePropertyById(cx, obj, atoms.column_number(),
+                                 tagged_column.oneOriginValue(),
                                  JSPROP_ENUMERATE);
 }
 
diff --git a/gi/object.cpp b/gi/object.cpp
index 6c5b4ff5f..ff3f799ea 100644
--- a/gi/object.cpp
+++ b/gi/object.cpp
@@ -677,8 +677,11 @@ static bool interface_getter(JSContext* cx, unsigned argc, JS::Value* vp) {
     g_assert(v_prototype.isObject() && "prototype must be an object");
 
     JS::RootedObject prototype(cx, &v_prototype.toObject());
-    JS::RootedId id(cx, JS::PropertyKey::NonIntAtom(JS_GetFunctionId(
-                            JS_GetObjectFunction(&args.callee()))));
+    JS::RootedFunction fn_obj{cx, JS_GetObjectFunction(&args.callee())};
+    JS::RootedString fn_name{cx};
+    if (!JS_GetFunctionId(cx, fn_obj, &fn_name))
+        return false;
+    JS::RootedId id{cx, JS::PropertyKey::NonIntAtom(fn_name)};
     return JS_GetPropertyById(cx, prototype, id, args.rval());
 }
 
diff --git a/gi/value.cpp b/gi/value.cpp
index 2e6c990d4..1eadcc3d2 100644
--- a/gi/value.cpp
+++ b/gi/value.cpp
@@ -381,12 +381,8 @@ void Gjs::Closure::marshal(GValue* return_value, unsigned n_param_values,
                 gjs->exit_immediately(code);
 
             // Some other uncatchable exception, e.g. out of memory
-            JSFunction* fn = JS_GetObjectFunction(callable());
-            std::string descr =
-                fn ? "function " + gjs_debug_string(JS_GetFunctionDisplayId(fn))
-                   : "callable object " + gjs_debug_object(callable());
             g_error("Call to %s terminated with uncatchable exception",
-                    descr.c_str());
+                    gjs_debug_callable(callable()).c_str());
         }
     }
 
diff --git a/gjs/byteArray.cpp b/gjs/byteArray.cpp
index e0b7a03b8..6f0232158 100644
--- a/gjs/byteArray.cpp
+++ b/gjs/byteArray.cpp
@@ -4,6 +4,7 @@
 
 #include <config.h>
 
+#include <mozilla/UniquePtr.h>
 #include <stdint.h>
 
 #include <glib-object.h>
@@ -145,12 +146,11 @@ from_gbytes_func(JSContext *context,
         return true;
     }
 
-    JS::RootedObject array_buffer(
-        context,
-        JS::NewExternalArrayBuffer(
-            context, len,
-            const_cast<void*>(data),  // the ArrayBuffer won't modify the data
-            bytes_unref_arraybuffer, gbytes));
+    mozilla::UniquePtr<void, JS::BufferContentsDeleter> contents{
+        const_cast<void*>(data),  // the ArrayBuffer won't modify the data,
+        {bytes_unref_arraybuffer, gbytes}};
+    JS::RootedObject array_buffer{
+        context, JS::NewExternalArrayBuffer(context, len, std::move(contents))};
     if (!array_buffer)
         return false;
     g_bytes_ref(gbytes);  // now owned by both ArrayBuffer and BoxedBase
@@ -167,11 +167,14 @@ from_gbytes_func(JSContext *context,
 JSObject* gjs_byte_array_from_data(JSContext* cx, size_t nbytes, void* data) {
     JS::RootedObject array_buffer(cx);
     // a null data pointer takes precedence over whatever `nbytes` says
-    if (data)
-        array_buffer = JS::NewArrayBufferWithContents(
-            cx, nbytes, _gjs_memdup2(data, nbytes));
-    else
+    if (data) {
+        mozilla::UniquePtr<void, JS::FreePolicy> contents{
+            _gjs_memdup2(data, nbytes)};
+        array_buffer =
+            JS::NewArrayBufferWithContents(cx, nbytes, std::move(contents));
+    } else {
         array_buffer = JS::NewArrayBuffer(cx, 0);
+    }
     if (!array_buffer)
         return nullptr;
 
diff --git a/gjs/context-private.h b/gjs/context-private.h
index 06cf6cf14..385cec4fc 100644
--- a/gjs/context-private.h
+++ b/gjs/context-private.h
@@ -259,6 +260,9 @@ class GjsContextPrivate : public JS::JobQueue {
                            JS::HandleObject incumbent_global) override;
     void runJobs(JSContext* cx) override;
     [[nodiscard]] bool empty() const override { return m_job_queue.empty(); }
+    [[nodiscard]] bool isDrainingStopped() const override {
+        return !m_draining_job_queue;
+    }
     js::UniquePtr<JS::JobQueue::SavedJobQueue> saveJobQueue(
         JSContext* cx) override;
 
diff --git a/gjs/context.cpp b/gjs/context.cpp
index 1190f2694..eaa7f2aaa 100644
--- a/gjs/context.cpp
+++ b/gjs/context.cpp
@@ -542,8 +542,8 @@ static bool on_context_module_rejected_log_exception(JSContext* cx,
                                                      JS::Value* vp) {
     JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
 
-    JSString* id =
-        JS_GetFunctionDisplayId(JS_GetObjectFunction(&args.callee()));
+    JSString* id = JS_GetMaybePartialFunctionDisplayId(
+        JS_GetObjectFunction(&args.callee()));
     gjs_debug(GJS_DEBUG_IMPORTER, "Module evaluation promise rejected: %s",
               gjs_debug_string(id).c_str());
 
@@ -564,8 +564,8 @@ static bool on_context_module_resolved(JSContext* cx, unsigned argc,
                                        JS::Value* vp) {
     JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
 
-    JSString* id =
-        JS_GetFunctionDisplayId(JS_GetObjectFunction(&args.callee()));
+    JSString* id = JS_GetMaybePartialFunctionDisplayId(
+        JS_GetObjectFunction(&args.callee()));
     gjs_debug(GJS_DEBUG_IMPORTER, "Module evaluation promise resolved: %s",
               gjs_debug_string(id).c_str());
 
@@ -628,8 +628,8 @@ static void load_context_module(JSContext* cx, const char* uri,
         [](JSContext* cx, unsigned argc, JS::Value* vp) {
             JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
 
-            JSString* id =
-                JS_GetFunctionDisplayId(JS_GetObjectFunction(&args.callee()));
+            JSString* id = JS_GetMaybePartialFunctionDisplayId(
+                JS_GetObjectFunction(&args.callee()));
             gjs_debug(GJS_DEBUG_IMPORTER,
                       "Module evaluation promise rejected: %s",
                       gjs_debug_string(id).c_str());
diff --git a/gjs/global.cpp b/gjs/global.cpp
index 6c3fd684f..898c49e2c 100644
--- a/gjs/global.cpp
+++ b/gjs/global.cpp
@@ -49,13 +49,6 @@ class GjsBaseGlobal {
     static JSObject* base(JSContext* cx, const JSClass* clasp,
                           JS::RealmCreationOptions options,
                           JSPrincipals* principals = nullptr) {
-        // Enable WeakRef without the cleanupSome specification
-        // Re-evaluate if cleanupSome is standardized
-        // See: https://github.com/tc39/proposal-cleanup-some
-        options
-            .setWeakRefsEnabled(JS::WeakRefSpecifier::EnabledWithoutCleanupSome)
-            .setChangeArrayByCopyEnabled(true);
-
         JS::RealmBehaviors behaviors;
         JS::RealmOptions compartment_options(options, behaviors);
 
diff --git a/gjs/jsapi-util-error.cpp b/gjs/jsapi-util-error.cpp
index 3f40d4661..4026432b2 100644
--- a/gjs/jsapi-util-error.cpp
+++ b/gjs/jsapi-util-error.cpp
@@ -4,6 +4,7 @@
 
 #include <config.h>
 
+#include <js/ColumnNumber.h>
 #include <stdarg.h>
 #include <stdint.h>
 #include <string.h>
@@ -113,8 +114,11 @@ static bool append_new_cause(JSContext* cx, JS::HandleValue thrown,
                             &source_string);
     uint32_t line_num;
     JS::GetSavedFrameLine(cx, nullptr, saved_frame, &line_num);
-    uint32_t column_num;
-    JS::GetSavedFrameColumn(cx, nullptr, saved_frame, &column_num);
+    JS::TaggedColumnNumberOneOrigin tagged_column;
+    JS::GetSavedFrameColumn(cx, nullptr, saved_frame, &tagged_column);
+    JS::ColumnNumberOneOrigin column_num =
+        JS::ColumnNumberOneOrigin{tagged_column.toLimitedColumnNumber()};
+    // asserts that this isn't a WASM frame
 
     JS::RootedValue v_exc{cx};
     if (!JS::CreateError(cx, error_kind, saved_frame, source_string, line_num,
@@ -251,8 +255,7 @@ void gjs_warning_reporter(JSContext*, JSErrorReport* report) {
     if (gjs_environment_variable_is_set("GJS_ABORT_ON_OOM") &&
         !report->isWarning() && report->errorNumber == 137) {
         /* 137, JSMSG_OUT_OF_MEMORY */
-        g_error("GJS ran out of memory at %s: %i.",
-                report->filename,
+        g_error("GJS ran out of memory at %s: %i.", report->filename.c_str(),
                 report->lineno);
     }
 
@@ -274,6 +277,6 @@ void gjs_warning_reporter(JSContext*, JSErrorReport* report) {
         level = G_LOG_LEVEL_WARNING;
     }
 
-    g_log(G_LOG_DOMAIN, level, "JS %s: [%s %d]: %s", warning, report->filename,
-          report->lineno, report->message().c_str());
+    g_log(G_LOG_DOMAIN, level, "JS %s: [%s %d]: %s", warning,
+          report->filename.c_str(), report->lineno, report->message().c_str());
 }
diff --git a/gjs/jsapi-util-string.cpp b/gjs/jsapi-util-string.cpp
index 4b6dbffeb..477bdec6d 100644
--- a/gjs/jsapi-util-string.cpp
+++ b/gjs/jsapi-util-string.cpp
@@ -590,7 +590,7 @@ gjs_debug_object(JSObject * const obj)
 
     if (js::IsFunctionObject(obj)) {
         JSFunction* fun = JS_GetObjectFunction(obj);
-        JSString* display_name = JS_GetFunctionDisplayId(fun);
+        JSString* display_name = JS_GetMaybePartialFunctionDisplayId(fun);
         if (display_name && JS_GetStringLength(display_name))
             out << "<function " << gjs_debug_string(display_name);
         else
@@ -622,6 +622,14 @@ gjs_debug_object(JSObject * const obj)
     return out.str();
 }
 
+std::string gjs_debug_callable(JSObject* callable) {
+    if (JSFunction* fn = JS_GetObjectFunction(callable)) {
+        return "function " +
+               gjs_debug_string(JS_GetMaybePartialFunctionDisplayId(fn));
+    };
+    return "callable object " + gjs_debug_object(callable);
+}
+
 std::string
 gjs_debug_value(JS::Value v)
 {
diff --git a/gjs/jsapi-util.h b/gjs/jsapi-util.h
index 20ff79866..60e2c6906 100644
--- a/gjs/jsapi-util.h
+++ b/gjs/jsapi-util.h
@@ -600,6 +600,7 @@ bool gjs_object_require_converted_property(JSContext       *context,
 [[nodiscard]] std::string gjs_debug_string(JSString* str);
 [[nodiscard]] std::string gjs_debug_symbol(JS::Symbol* const sym);
 [[nodiscard]] std::string gjs_debug_object(JSObject* obj);
+[[nodiscard]] std::string gjs_debug_callable(JSObject* callable);
 [[nodiscard]] std::string gjs_debug_value(JS::Value v);
 [[nodiscard]] std::string gjs_debug_id(jsid id);
 
diff --git a/gjs/text-encoding.cpp b/gjs/text-encoding.cpp
index e2a4e8cf4..77700c7e4 100644
--- a/gjs/text-encoding.cpp
+++ b/gjs/text-encoding.cpp
@@ -398,7 +398,8 @@ JSObject* gjs_encode_to_uint8array(JSContext* cx, JS::HandleString str,
             utf8_len = strlen(utf8.get());
         }
 
-        array_buffer = JS::NewArrayBufferWithContents(cx, utf8_len, utf8.get());
+        array_buffer =
+            JS::NewArrayBufferWithContents(cx, utf8_len, std::move(utf8));
 
         // array_buffer only assumes ownership if the call succeeded,
         // if array_buffer assumes ownership we must release our ownership
@@ -453,9 +454,10 @@ JSObject* gjs_encode_to_uint8array(JSContext* cx, JS::HandleString str,
         if (bytes_written == 0)
             return JS_NewUint8Array(cx, 0);
 
+        mozilla::UniquePtr<void, JS::BufferContentsDeleter> contents{
+            encoded.release(), gfree_arraybuffer_contents};
         array_buffer =
-            JS::NewExternalArrayBuffer(cx, bytes_written, encoded.release(),
-                                       gfree_arraybuffer_contents, nullptr);
+            JS::NewExternalArrayBuffer(cx, bytes_written, std::move(contents));
     }
 
     if (!array_buffer)
diff --git a/installed-tests/debugger/backtrace.debugger.output b/installed-tests/debugger/backtrace.debugger.output
index 2f2bb4c90..1602e7958 100644
--- a/installed-tests/debugger/backtrace.debugger.output
+++ b/installed-tests/debugger/backtrace.debugger.output
@@ -2,40 +2,40 @@ GJS debugger. Type "help" for help
 db> # SPDX-License-Identifier: MIT OR LGPL-2.0-or-later
 db> # SPDX-FileCopyrightText: 2018 Philip Chimento <philip.chimento@gmail.com>
 db> backtrace
-#0    toplevel at backtrace.debugger.js:3:0
+#0    toplevel at backtrace.debugger.js:3:1
 db> c
-Debugger statement, toplevel at backtrace.debugger.js:3:0
+Debugger statement, toplevel at backtrace.debugger.js:3:1
 db> bt
-#0    toplevel at backtrace.debugger.js:3:0
+#0    toplevel at backtrace.debugger.js:3:1
 db> c
-Debugger statement, <anonymous>([object Array], 0, [object Array]) at backtrace.debugger.js:5:4
+Debugger statement, <anonymous>([object Array], 0, [object Array]) at backtrace.debugger.js:5:5
 db> backtrace full
-#0    <anonymous>([object Array], 0, [object Array]) at backtrace.debugger.js:5:4
+#0    <anonymous>([object Array], 0, [object Array]) at backtrace.debugger.js:5:5
 arguments = [object Arguments]
 array = [object Array]
-#1    toplevel at backtrace.debugger.js:4:36
+#1    toplevel at backtrace.debugger.js:4:37
 db> bt full
-#0    <anonymous>([object Array], 0, [object Array]) at backtrace.debugger.js:5:4
+#0    <anonymous>([object Array], 0, [object Array]) at backtrace.debugger.js:5:5
 arguments = [object Arguments]
 array = [object Array]
-#1    toplevel at backtrace.debugger.js:4:36
+#1    toplevel at backtrace.debugger.js:4:37
 db> where
-#0    <anonymous>([object Array], 0, [object Array]) at backtrace.debugger.js:5:4
-#1    toplevel at backtrace.debugger.js:4:36
+#0    <anonymous>([object Array], 0, [object Array]) at backtrace.debugger.js:5:5
+#1    toplevel at backtrace.debugger.js:4:37
 db> c
-Debugger statement, <anonymous>(1, 0, [object Array]) at backtrace.debugger.js:7:8
+Debugger statement, <anonymous>(1, 0, [object Array]) at backtrace.debugger.js:7:9
 db> # test printing locals when exception is thrown before initialization of a value
 db> c
 1
 Unwinding due to exception. (Type 'c' to continue unwinding.)
-#0    mistake([object Array]) at backtrace.debugger.js:14:33
+#0    mistake([object Array]) at backtrace.debugger.js:14:34
    14	    let {uninitialized_} = array.shift();
 Exception value is:
 $1 = [object TypeError]
 TypeError: array.shift() is undefined
 db> bt full
-#0    mistake([object Array]) at backtrace.debugger.js:14:33
+#0    mistake([object Array]) at backtrace.debugger.js:14:34
 uninitialized_ = <uninitialized>
-#1    toplevel at backtrace.debugger.js:16:7
+#1    toplevel at backtrace.debugger.js:16:8
 db> q
 Program exited with code 0
diff --git a/installed-tests/debugger/breakpoint.debugger.output b/installed-tests/debugger/breakpoint.debugger.output
index 6ba35fb57..9802391e6 100644
--- a/installed-tests/debugger/breakpoint.debugger.output
+++ b/installed-tests/debugger/breakpoint.debugger.output
@@ -2,20 +2,20 @@ GJS debugger. Type "help" for help
 db> # SPDX-License-Identifier: MIT OR LGPL-2.0-or-later
 db> # SPDX-FileCopyrightText: 2018 Philip Chimento <philip.chimento@gmail.com>
 db> breakpoint 4
-Breakpoint 1 at breakpoint.debugger.js:4:0
+Breakpoint 1 at breakpoint.debugger.js:4:1
 db> break 6
-Breakpoint 2 at breakpoint.debugger.js:6:4
+Breakpoint 2 at breakpoint.debugger.js:6:5
 db> b 8
-Breakpoint 3 at breakpoint.debugger.js:8:0
+Breakpoint 3 at breakpoint.debugger.js:8:1
 db> c
 1
-Breakpoint 1, toplevel at breakpoint.debugger.js:4:0
+Breakpoint 1, toplevel at breakpoint.debugger.js:4:1
 db> c
 2
-Breakpoint 3, toplevel at breakpoint.debugger.js:8:0
+Breakpoint 3, toplevel at breakpoint.debugger.js:8:1
 db> c
 3
-Breakpoint 2, foo() at breakpoint.debugger.js:6:4
+Breakpoint 2, foo() at breakpoint.debugger.js:6:5
 db> c
 Function foo
 Program exited with code 0
diff --git a/installed-tests/debugger/continue.debugger.output b/installed-tests/debugger/continue.debugger.output
index 93d0bc0fb..8326b8122 100644
--- a/installed-tests/debugger/continue.debugger.output
+++ b/installed-tests/debugger/continue.debugger.output
@@ -2,8 +2,8 @@ GJS debugger. Type "help" for help
 db> # SPDX-License-Identifier: MIT OR LGPL-2.0-or-later
 db> # SPDX-FileCopyrightText: 2018 Philip Chimento <philip.chimento@gmail.com>
 db> continue
-Debugger statement, toplevel at continue.debugger.js:3:0
+Debugger statement, toplevel at continue.debugger.js:3:1
 db> cont
-Debugger statement, toplevel at continue.debugger.js:4:0
+Debugger statement, toplevel at continue.debugger.js:4:1
 db> c
 Program exited with code 0
diff --git a/installed-tests/debugger/delete.debugger.output b/installed-tests/debugger/delete.debugger.output
index 7b9f98f88..a6e7b4f53 100644
--- a/installed-tests/debugger/delete.debugger.output
+++ b/installed-tests/debugger/delete.debugger.output
@@ -2,26 +2,26 @@ GJS debugger. Type "help" for help
 db> # SPDX-License-Identifier: MIT OR LGPL-2.0-or-later
 db> # SPDX-FileCopyrightText: 2018 Philip Chimento <philip.chimento@gmail.com>
 db> b 4
-Breakpoint 1 at delete.debugger.js:4:0
+Breakpoint 1 at delete.debugger.js:4:1
 db> b 5
-Breakpoint 2 at delete.debugger.js:5:0
+Breakpoint 2 at delete.debugger.js:5:1
 db> b 6
-Breakpoint 3 at delete.debugger.js:6:0
+Breakpoint 3 at delete.debugger.js:6:1
 db> b 7
-Breakpoint 4 at delete.debugger.js:7:0
+Breakpoint 4 at delete.debugger.js:7:1
 db> # Check that breakpoint 4 still remains after deleting 1-3
 db> delete 1
-Breakpoint 1 at delete.debugger.js:4:0 deleted
+Breakpoint 1 at delete.debugger.js:4:1 deleted
 db> del 2
-Breakpoint 2 at delete.debugger.js:5:0 deleted
+Breakpoint 2 at delete.debugger.js:5:1 deleted
 db> d 3
-Breakpoint 3 at delete.debugger.js:6:0 deleted
+Breakpoint 3 at delete.debugger.js:6:1 deleted
 db> c
 1
 2
 3
 4
-Breakpoint 4, toplevel at delete.debugger.js:7:0
+Breakpoint 4, toplevel at delete.debugger.js:7:1
 db> c
 5
 Program exited with code 0
diff --git a/installed-tests/debugger/down-up.debugger.output b/installed-tests/debugger/down-up.debugger.output
index c8b1a3bad..0c0a7f024 100644
--- a/installed-tests/debugger/down-up.debugger.output
+++ b/installed-tests/debugger/down-up.debugger.output
@@ -2,34 +2,34 @@ GJS debugger. Type "help" for help
 db> # SPDX-License-Identifier: MIT OR LGPL-2.0-or-later
 db> # SPDX-FileCopyrightText: 2018 Philip Chimento <philip.chimento@gmail.com>
 db> c
-Debugger statement, d() at down-up.debugger.js:16:4
+Debugger statement, d() at down-up.debugger.js:16:5
 db> down
 Youngest frame selected; you cannot go down.
 db> up
-#1    c() at down-up.debugger.js:12:4
+#1    c() at down-up.debugger.js:12:5
    12	    d();
 db> up
-#2    b() at down-up.debugger.js:8:4
+#2    b() at down-up.debugger.js:8:5
    8	    c();
 db> up
-#3    a() at down-up.debugger.js:4:4
+#3    a() at down-up.debugger.js:4:5
    4	    b();
 db> up
-#4    toplevel at down-up.debugger.js:19:0
+#4    toplevel at down-up.debugger.js:19:1
    19	a();
 db> up
 Initial frame selected; you cannot go up.
 db> down
-#3    a() at down-up.debugger.js:4:4
+#3    a() at down-up.debugger.js:4:5
    4	    b();
 db> dn
-#2    b() at down-up.debugger.js:8:4
+#2    b() at down-up.debugger.js:8:5
    8	    c();
 db> dn
-#1    c() at down-up.debugger.js:12:4
+#1    c() at down-up.debugger.js:12:5
    12	    d();
 db> dn
-#0    d() at down-up.debugger.js:16:4
+#0    d() at down-up.debugger.js:16:5
    16	    debugger;
 db> c
 Program exited with code 0
diff --git a/installed-tests/debugger/finish.debugger.output b/installed-tests/debugger/finish.debugger.output
index c33532ab7..8f612f50b 100644
--- a/installed-tests/debugger/finish.debugger.output
+++ b/installed-tests/debugger/finish.debugger.output
@@ -3,21 +3,21 @@ db> # SPDX-License-Identifier: MIT OR LGPL-2.0-or-later
 db> # SPDX-FileCopyrightText: 2018 Philip Chimento <philip.chimento@gmail.com>
 db> c
 Print me
-Debugger statement, foo() at finish.debugger.js:5:4
+Debugger statement, foo() at finish.debugger.js:5:5
 db> finish
-Run till exit from foo() at finish.debugger.js:5:4
+Run till exit from foo() at finish.debugger.js:5:5
 Print me also
 No value returned.
-toplevel at finish.debugger.js:16:0
+toplevel at finish.debugger.js:16:1
 db> c
 Print me
-Debugger statement, bar() at finish.debugger.js:11:4
+Debugger statement, bar() at finish.debugger.js:11:5
 db> fin
-Run till exit from bar() at finish.debugger.js:11:4
+Run till exit from bar() at finish.debugger.js:11:5
 Print me also
 Value returned is:
 $1 = 5
-toplevel at finish.debugger.js:17:0
+toplevel at finish.debugger.js:17:1
 db> c
 Print me at the end
 Program exited with code 0
diff --git a/installed-tests/debugger/frame.debugger.output b/installed-tests/debugger/frame.debugger.output
index 9e456cda2..f40e1362f 100644
--- a/installed-tests/debugger/frame.debugger.output
+++ b/installed-tests/debugger/frame.debugger.output
@@ -2,12 +2,12 @@ GJS debugger. Type "help" for help
 db> # SPDX-License-Identifier: MIT OR LGPL-2.0-or-later
 db> # SPDX-FileCopyrightText: 2018 Philip Chimento <philip.chimento@gmail.com>
 db> c
-Debugger statement, b() at frame.debugger.js:8:4
+Debugger statement, b() at frame.debugger.js:8:5
 db> frame 2
-#2    toplevel at frame.debugger.js:11:0
+#2    toplevel at frame.debugger.js:11:1
    11	a();
 db> f 1
-#1    a() at frame.debugger.js:4:4
+#1    a() at frame.debugger.js:4:5
    4	    b();
 db> c
 Program exited with code 0
diff --git a/installed-tests/debugger/keys.debugger.output b/installed-tests/debugger/keys.debugger.output
index e689ddade..4784c7e67 100644
--- a/installed-tests/debugger/keys.debugger.output
+++ b/installed-tests/debugger/keys.debugger.output
@@ -2,7 +2,7 @@ GJS debugger. Type "help" for help
 db> # SPDX-License-Identifier: MIT OR LGPL-2.0-or-later
 db> # SPDX-FileCopyrightText: 2018 Philip Chimento <philip.chimento@gmail.com>
 db> c
-Debugger statement, toplevel at keys.debugger.js:9:0
+Debugger statement, toplevel at keys.debugger.js:9:1
 db> keys a
 "foo", "bar", "tres", Symbol("s")
 db> k a
diff --git a/installed-tests/debugger/lastvalues.debugger.output b/installed-tests/debugger/lastvalues.debugger.output
index 3d509f08c..6aa6a53b4 100644
--- a/installed-tests/debugger/lastvalues.debugger.output
+++ b/installed-tests/debugger/lastvalues.debugger.output
@@ -2,7 +2,7 @@ GJS debugger. Type "help" for help
 db> # SPDX-License-Identifier: MIT OR LGPL-2.0-or-later
 db> # SPDX-FileCopyrightText: 2020 Philip Chimento <philip.chimento@gmail.com>
 db> c
-Debugger statement, toplevel at lastvalues.debugger.js:6:0
+Debugger statement, toplevel at lastvalues.debugger.js:6:1
 db> p a
 $1 = undefined
 db> p b
diff --git a/installed-tests/debugger/list.debugger.output b/installed-tests/debugger/list.debugger.output
index ce7857ab4..eaa483e2d 100644
--- a/installed-tests/debugger/list.debugger.output
+++ b/installed-tests/debugger/list.debugger.output
@@ -41,9 +41,9 @@ db> list 0
 db> list divide
 Unknown option
 db> break 4
-Breakpoint 1 at list.debugger.js:4:8
+Breakpoint 1 at list.debugger.js:4:9
 db> c
-Breakpoint 1, divide() at list.debugger.js:4:8
+Breakpoint 1, divide() at list.debugger.js:4:9
 db> list
    1	// SPDX-License-Identifier: MIT OR LGPL-2.0-or-later
    2	// SPDX-FileCopyrightText: 2021 Mantoh Nasah Kuma <nasahnash20@gmail.com>
diff --git a/installed-tests/debugger/next.debugger.output b/installed-tests/debugger/next.debugger.output
index 7b8836db8..ab60091be 100644
--- a/installed-tests/debugger/next.debugger.output
+++ b/installed-tests/debugger/next.debugger.output
@@ -2,26 +2,26 @@ GJS debugger. Type "help" for help
 db> # SPDX-License-Identifier: MIT OR LGPL-2.0-or-later
 db> # SPDX-FileCopyrightText: 2018 Philip Chimento <philip.chimento@gmail.com>
 db> c
-Debugger statement, a() at next.debugger.js:4:4
+Debugger statement, a() at next.debugger.js:4:5
 db> next
-a() at next.debugger.js:4:4
+a() at next.debugger.js:4:5
 db> n
-a() at next.debugger.js:5:4
+a() at next.debugger.js:5:5
 A line in b
 db> n
-a() at next.debugger.js:6:4
+a() at next.debugger.js:6:5
 A line in a
 db> n
-a() at next.debugger.js:7:0
+a() at next.debugger.js:7:1
 No value returned.
 db> n
-a() at next.debugger.js:7:0
-toplevel at next.debugger.js:13:0
+a() at next.debugger.js:7:1
+toplevel at next.debugger.js:13:1
 db> n
-toplevel at next.debugger.js:13:0
+toplevel at next.debugger.js:13:1
 db> n
-toplevel at next.debugger.js:14:0
+toplevel at next.debugger.js:14:1
 No value returned.
 db> n
-toplevel at next.debugger.js:14:0
+toplevel at next.debugger.js:14:1
 Program exited with code 0
diff --git a/installed-tests/debugger/print.debugger.output b/installed-tests/debugger/print.debugger.output
index 3c65b0d58..90c80f877 100644
--- a/installed-tests/debugger/print.debugger.output
+++ b/installed-tests/debugger/print.debugger.output
@@ -2,7 +2,7 @@ GJS debugger. Type "help" for help
 db> # SPDX-License-Identifier: MIT OR LGPL-2.0-or-later
 db> # SPDX-FileCopyrightText: 2018 Philip Chimento <philip.chimento@gmail.com>
 db> c
-Debugger statement, toplevel at print.debugger.js:19:0
+Debugger statement, toplevel at print.debugger.js:19:1
 db> # Simple types
 db> print a
 $1 = undefined
diff --git a/installed-tests/debugger/return.debugger.output b/installed-tests/debugger/return.debugger.output
index 91af7ae92..7ba8bfe1e 100644
--- a/installed-tests/debugger/return.debugger.output
+++ b/installed-tests/debugger/return.debugger.output
@@ -2,19 +2,19 @@ GJS debugger. Type "help" for help
 db> # SPDX-License-Identifier: MIT OR LGPL-2.0-or-later
 db> # SPDX-FileCopyrightText: 2018 Philip Chimento <philip.chimento@gmail.com>
 db> b 4
-Breakpoint 1 at return.debugger.js:4:4
+Breakpoint 1 at return.debugger.js:4:5
 db> b 8
-Breakpoint 2 at return.debugger.js:8:4
+Breakpoint 2 at return.debugger.js:8:5
 db> b 12
-Breakpoint 3 at return.debugger.js:12:4
+Breakpoint 3 at return.debugger.js:12:5
 db> c
-Breakpoint 1, func1() at return.debugger.js:4:4
+Breakpoint 1, func1() at return.debugger.js:4:5
 db> return
 undefined
-Breakpoint 2, func2() at return.debugger.js:8:4
+Breakpoint 2, func2() at return.debugger.js:8:5
 db> ret 5
 5
-Breakpoint 3, func3() at return.debugger.js:12:4
+Breakpoint 3, func3() at return.debugger.js:12:5
 db> ret `${4 * 10 + 2} is the answer`
 42 is the answer
 Program exited with code 0
diff --git a/installed-tests/debugger/set.debugger.output b/installed-tests/debugger/set.debugger.output
index 613071d17..a85fe1052 100644
--- a/installed-tests/debugger/set.debugger.output
+++ b/installed-tests/debugger/set.debugger.output
@@ -4,7 +4,7 @@ db> # SPDX-FileCopyrightText: 2018 Philip Chimento <philip.chimento@gmail.com>
 db> # Currently the only option is "pretty" for pretty-printing. Set doesn't yet
 db> # allow setting variables in the program.
 db> c
-Debugger statement, toplevel at set.debugger.js:4:0
+Debugger statement, toplevel at set.debugger.js:4:1
 db> p a
 $1 = [object Object]
 {}
diff --git a/installed-tests/debugger/step.debugger.output b/installed-tests/debugger/step.debugger.output
index 47da89652..592e584c9 100644
--- a/installed-tests/debugger/step.debugger.output
+++ b/installed-tests/debugger/step.debugger.output
@@ -2,36 +2,36 @@ GJS debugger. Type "help" for help
 db> # SPDX-License-Identifier: MIT OR LGPL-2.0-or-later
 db> # SPDX-FileCopyrightText: 2018 Philip Chimento <philip.chimento@gmail.com>
 db> s
-toplevel at step.debugger.js:12:0
-entered frame: a() at step.debugger.js:4:4
+toplevel at step.debugger.js:12:1
+entered frame: a() at step.debugger.js:4:5
 db> s
-a() at step.debugger.js:4:4
-entered frame: b() at step.debugger.js:9:4
+a() at step.debugger.js:4:5
+entered frame: b() at step.debugger.js:9:5
 db> s
-b() at step.debugger.js:9:4
+b() at step.debugger.js:9:5
 A line in b
 db> s
-b() at step.debugger.js:10:0
+b() at step.debugger.js:10:1
 No value returned.
 db> s
-b() at step.debugger.js:10:0
-a() at step.debugger.js:4:4
+b() at step.debugger.js:10:1
+a() at step.debugger.js:4:5
 db> s
-a() at step.debugger.js:4:4
+a() at step.debugger.js:4:5
 db> s
-a() at step.debugger.js:5:4
+a() at step.debugger.js:5:5
 A line in a
 db> s
-a() at step.debugger.js:6:0
+a() at step.debugger.js:6:1
 No value returned.
 db> s
-a() at step.debugger.js:6:0
-toplevel at step.debugger.js:12:0
+a() at step.debugger.js:6:1
+toplevel at step.debugger.js:12:1
 db> s
-toplevel at step.debugger.js:12:0
+toplevel at step.debugger.js:12:1
 db> s
-toplevel at step.debugger.js:13:0
+toplevel at step.debugger.js:13:1
 No value returned.
 db> s
-toplevel at step.debugger.js:13:0
+toplevel at step.debugger.js:13:1
 Program exited with code 0
diff --git a/installed-tests/debugger/throw-ignored.debugger.output b/installed-tests/debugger/throw-ignored.debugger.output
index a2ac43d17..2e6bfb3e1 100644
--- a/installed-tests/debugger/throw-ignored.debugger.output
+++ b/installed-tests/debugger/throw-ignored.debugger.output
@@ -4,7 +4,7 @@ db> # SPDX-FileCopyrightText: 2021 Florian Müllner <fmuellner@gnome.org>
 db> c
 Caught exception: Error: Exception nº 1
 Unwinding due to exception. (Type 'c' to continue unwinding.)
-#0    a() at throw-ignored.debugger.js:7:10
+#0    a() at throw-ignored.debugger.js:7:11
    7	    throw new Error(`Exception nº ${++count}`);
 Exception value is:
 $1 = [object Error]
diff --git a/installed-tests/debugger/throw.debugger.output b/installed-tests/debugger/throw.debugger.output
index 03da24ee2..99876a96c 100644
--- a/installed-tests/debugger/throw.debugger.output
+++ b/installed-tests/debugger/throw.debugger.output
@@ -3,20 +3,20 @@ db> # SPDX-License-Identifier: MIT OR LGPL-2.0-or-later
 db> # SPDX-FileCopyrightText: 2018 Philip Chimento <philip.chimento@gmail.com>
 db> set ignoreCaughtExceptions false
 db> c
-Debugger statement, a() at throw.debugger.js:4:4
+Debugger statement, a() at throw.debugger.js:4:5
 db> throw 'foobar' + 3.14;
 Unwinding due to exception. (Type 'c' to continue unwinding.)
-#0    a() at throw.debugger.js:4:4
+#0    a() at throw.debugger.js:4:5
    4	    debugger;
 Exception value is:
 $1 = "foobar3.14"
 db> fin
-Run till exit from a() at throw.debugger.js:4:4
+Run till exit from a() at throw.debugger.js:4:5
 Frame terminated by exception:
 $2 = "foobar3.14"
 (To rethrow it, type 'throw'.)
 Unwinding due to exception. (Type 'c' to continue unwinding.)
-#0    toplevel at throw.debugger.js:9:4
+#0    toplevel at throw.debugger.js:9:5
    9	    a();
 Exception value is:
 $3 = "foobar3.14"
diff --git a/installed-tests/debugger/until.debugger.output b/installed-tests/debugger/until.debugger.output
index 811362ae7..55dda3578 100644
--- a/installed-tests/debugger/until.debugger.output
+++ b/installed-tests/debugger/until.debugger.output
@@ -2,18 +2,18 @@ GJS debugger. Type "help" for help
 db> # SPDX-License-Identifier: MIT OR LGPL-2.0-or-later
 db> # SPDX-FileCopyrightText: 2018 Philip Chimento <philip.chimento@gmail.com>
 db> until 5
-toplevel at until.debugger.js:3:0
+toplevel at until.debugger.js:3:1
 1
 2
 db> upto 7
-toplevel at until.debugger.js:5:0
+toplevel at until.debugger.js:5:1
 3
-entered frame: <anonymous>() at until.debugger.js:7:4
+entered frame: <anonymous>() at until.debugger.js:7:5
 db> u 9
-<anonymous>() at until.debugger.js:7:4
+<anonymous>() at until.debugger.js:7:5
 4
 No value returned.
-toplevel at until.debugger.js:9:0
+toplevel at until.debugger.js:9:1
 db> c
 5
 Program exited with code 0
diff --git a/installed-tests/scripts/testWarnings.sh b/installed-tests/scripts/testWarnings.sh
index 5dbf1c008..de471ffd0 100755
--- a/installed-tests/scripts/testWarnings.sh
+++ b/installed-tests/scripts/testWarnings.sh
@@ -29,7 +29,7 @@ $gjs -c 'imports.gi.GLib.get_home_dir("foobar")' 2>&1 | \
 report "passing too many arguments to a GI function should warn"
 
 $gjs -c '**' 2>&1 | \
-    grep -q 'SyntaxError.*@ <command line>:1:0'
+    grep -q 'SyntaxError.*@ <command line>:1:1'
 report "file and line number are logged for syntax errors"
 
 echo "1..$total"
diff --git a/meson.build b/meson.build
index 062077d56..c0d91670c 100644
--- a/meson.build
+++ b/meson.build
@@ -137,7 +137,7 @@ gio = dependency('gio-2.0', version: glib_required_version,
 ffi = dependency('libffi', fallback: ['libffi', 'ffi_dep'])
 gi = dependency('gobject-introspection-1.0', version: '>= 1.66.0',
     fallback: ['gobject-introspection', 'girepo_dep'])
-spidermonkey = dependency('mozjs-115')
+spidermonkey = dependency('mozjs-128')
 
 # We might need to look for the headers and lib's for Cairo
 # manually on MSVC/clang-cl builds...
-- 
GitLab

