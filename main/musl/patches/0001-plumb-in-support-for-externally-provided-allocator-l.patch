From 5b2dec8ba0fdf84e75de5e4a1591e21af4d8f626 Mon Sep 17 00:00:00 2001
From: q66 <q66@chimera-linux.org>
Date: Sun, 4 Aug 2024 00:42:35 +0200
Subject: [PATCH] plumb in support for externally provided allocator libraries

The external static library has to provide the following symbols:

* __malloc_atfork
* __malloc_donate
* __malloc_tls_teardown
* __libc_calloc
* __libc_free
* __libc_malloc_impl
* __libc_realloc
* aligned_alloc
* malloc_usable_size

It can access the following variables via extern:

* __aligned_alloc_replaced
* __malloc_replaced
* __malloc_tls_get
---
 Makefile                    | 10 ++++++++--
 src/env/__init_tls.c        |  1 +
 src/internal/pthread_impl.h |  4 ++++
 src/malloc/calloc.c         |  4 ++++
 src/malloc/external/empty.h |  1 +
 src/malloc/libc_calloc.c    |  4 ++++
 src/thread/pthread_create.c | 13 +++++++++++++
 7 files changed, 35 insertions(+), 2 deletions(-)
 create mode 100644 src/malloc/external/empty.h

diff --git a/Makefile b/Makefile
index e8cc443..d3b62ab 100644
--- a/Makefile
+++ b/Makefile
@@ -23,6 +23,7 @@ BASE_GLOBS = $(addsuffix /*.c,$(SRC_DIRS))
 ARCH_GLOBS = $(addsuffix /$(ARCH)/*.[csS],$(SRC_DIRS))
 BASE_SRCS = $(sort $(wildcard $(BASE_GLOBS)))
 ARCH_SRCS = $(sort $(wildcard $(ARCH_GLOBS)))
+MALLOC_OBJS = $(sort $(wildcard src/malloc/$(MALLOC_DIR)/*.o))
 BASE_OBJS = $(patsubst $(srcdir)/%,%.o,$(basename $(BASE_SRCS)))
 ARCH_OBJS = $(patsubst $(srcdir)/%,%.o,$(basename $(ARCH_SRCS)))
 REPLACED_OBJS = $(sort $(subst /$(ARCH)/,/,$(ARCH_OBJS)))
@@ -32,8 +33,8 @@ LIBC_OBJS = $(filter obj/src/%,$(ALL_OBJS)) $(filter obj/compat/%,$(ALL_OBJS))
 LDSO_OBJS = $(filter obj/ldso/%,$(ALL_OBJS:%.o=%.lo))
 CRT_OBJS = $(filter obj/crt/%,$(ALL_OBJS))
 
-AOBJS = $(LIBC_OBJS)
-LOBJS = $(LIBC_OBJS:.o=.lo)
+AOBJS = $(LIBC_OBJS) $(MALLOC_OBJS)
+LOBJS = $(LIBC_OBJS:.o=.lo) $(MALLOC_OBJS)
 GENH = obj/include/bits/alltypes.h obj/include/bits/syscall.h
 GENH_INT = obj/src/internal/version.h
 IMPH = $(addprefix $(srcdir)/, src/internal/stdio_impl.h src/internal/pthread_impl.h src/internal/locale_impl.h src/internal/libc.h)
@@ -131,6 +132,11 @@ $(CRT_OBJS): CFLAGS_ALL += -DCRT
 
 $(LOBJS) $(LDSO_OBJS): CFLAGS_ALL += -fPIC
 
+ifeq (external,$(MALLOC_DIR))
+obj/src/malloc/calloc.lo: CFLAGS_ALL += -DLIBC_CALLOC_EXTERNAL
+obj/src/malloc/libc_calloc.lo: CFLAGS_ALL += -DLIBC_CALLOC_EXTERNAL
+endif
+
 CC_CMD = $(CC) $(CFLAGS_ALL) -c -o $@ $<
 
 # Choose invocation of assembler to be used
diff --git a/src/env/__init_tls.c b/src/env/__init_tls.c
index a93141e..70d150c 100644
--- a/src/env/__init_tls.c
+++ b/src/env/__init_tls.c
@@ -21,6 +21,7 @@ int __init_tp(void *p)
 	td->detach_state = DT_JOINABLE;
 	td->tid = __syscall(SYS_set_tid_address, &__thread_list_lock);
 	td->locale = &libc.global_locale;
+	td->malloc_tls = NULL;
 	td->robust_list.head = &td->robust_list.head;
 	td->sysinfo = __sysinfo;
 	td->next = td->prev = td;
diff --git a/src/internal/pthread_impl.h b/src/internal/pthread_impl.h
index de2b9d8..953bb9e 100644
--- a/src/internal/pthread_impl.h
+++ b/src/internal/pthread_impl.h
@@ -58,6 +58,7 @@ struct pthread {
 	volatile int killlock[1];
 	char *dlerror_buf;
 	void *stdio_locks;
+	void *malloc_tls;
 
 	/* Part 3 -- the positions of these fields relative to
 	 * the end of the structure is external and internal ABI. */
@@ -187,6 +188,9 @@ hidden void __tl_lock(void);
 hidden void __tl_unlock(void);
 hidden void __tl_sync(pthread_t);
 
+hidden void __malloc_tls_teardown(void *p);
+hidden void **__malloc_tls_get(void);
+
 extern hidden volatile int __thread_list_lock;
 
 extern hidden volatile int __abort_lock[1];
diff --git a/src/malloc/calloc.c b/src/malloc/calloc.c
index bf6bddc..6aa482c 100644
--- a/src/malloc/calloc.c
+++ b/src/malloc/calloc.c
@@ -32,6 +32,10 @@ weak_alias(allzerop, __malloc_allzerop);
 
 void *calloc(size_t m, size_t n)
 {
+#ifdef LIBC_CALLOC_EXTERNAL
+	if (!__malloc_replaced)
+		return __libc_calloc(m, n);
+#endif
 	if (n && m > (size_t)-1/n) {
 		errno = ENOMEM;
 		return 0;
diff --git a/src/malloc/external/empty.h b/src/malloc/external/empty.h
new file mode 100644
index 0000000..40a8c17
--- /dev/null
+++ b/src/malloc/external/empty.h
@@ -0,0 +1 @@
+/* empty */
diff --git a/src/malloc/libc_calloc.c b/src/malloc/libc_calloc.c
index d25eabe..3895c8c 100644
--- a/src/malloc/libc_calloc.c
+++ b/src/malloc/libc_calloc.c
@@ -1,4 +1,8 @@
+#ifndef LIBC_CALLOC_EXTERNAL
+
 #define calloc __libc_calloc
 #define malloc __libc_malloc
 
 #include "calloc.c"
+
+#endif
diff --git a/src/thread/pthread_create.c b/src/thread/pthread_create.c
index 087f620..46661ef 100644
--- a/src/thread/pthread_create.c
+++ b/src/thread/pthread_create.c
@@ -68,6 +68,7 @@ _Noreturn void __pthread_exit(void *result)
 	}
 
 	__pthread_tsd_run_dtors();
+	__malloc_tls_teardown(&self->malloc_tls);
 
 	__block_app_sigs(&set);
 
@@ -319,6 +320,7 @@ int __pthread_create(pthread_t *restrict res, const pthread_attr_t *restrict att
 	new->self = new;
 	new->tsd = (void *)tsd;
 	new->locale = &libc.global_locale;
+	new->malloc_tls = NULL;
 	if (attr._a_detach) {
 		new->detach_state = DT_DETACHED;
 	} else {
@@ -395,3 +397,14 @@ fail:
 
 weak_alias(__pthread_exit, pthread_exit);
 weak_alias(__pthread_create, pthread_create);
+
+static void malloc_tls_teardown(void *p) {}
+
+weak_alias(malloc_tls_teardown, __malloc_tls_teardown);
+
+void **__malloc_tls_get(void) {
+	struct pthread *p;
+	pthread_t s = __pthread_self();
+	memcpy(&p, &s, sizeof(struct pthread *));
+	return &p->malloc_tls;
+}
-- 
2.46.0

